{"name":"Personal Music Library","body":"Music Library\r\n=============\r\nA simple web interface to listen to your music anywhere.\r\n\r\n\r\nSetup\r\n-----\r\n1. Install required python modules\r\n\r\n        pip install -r pip.txt\r\n\r\n2. Create settings.py from sample\r\n\r\n        cp musiclibrary/settings.py.sample musiclibrary/settings.py\r\n\r\n3. Create database (sqlite3 for the moment, redis/mongo document based in _mid-dev_ as a option soon ) , and admin account\r\n\r\n        ./manage.py syncdb\r\n\r\n4. Create a symbolic link to your music collection inside static/\r\n\r\n        ln -s /path/to/music/collection static/music\r\n\r\n5. Import ID3 genre data to use as canonical genre meta data\r\n\r\n        ./manage.py import_id3_genres\r\n\r\n6. Synchronize meta data of music files from the filesystem into the database\r\n\r\n        ./manage.py sync_music\r\n\r\n7. Start local website on localhost:8000\r\n\r\n        ./manage.py runserver\r\n\r\n8. Visit http://localhost:8000/folders/\r\n\r\n\r\nLive demos\r\n----------\r\n- http://dev.musiclibrary.titan2x.com/folders/\r\n\r\n\r\nScreenshots\r\n-----------\r\n![Folders](https://github.com/websitedevops/musiclibrary/raw/master/static/screenshots/folders.png)\r\n![Albums](https://github.com/websitedevops/musiclibrary/raw/master/static/screenshots/album.png)\r\n\r\n\r\nFeatures\r\n--------\r\n- Traverse directory of music files\r\n- Music files are playable in the browser using the Yahoo! WebPlayer\r\n\r\nWell that's pretty much it for now. And it's working fine like that. But that's not great.\r\n\r\nWork in progress: (stuff that's working but not really used yet) \r\n- Import meta data from music files and store in a local database cache for fast access\r\n- Supported audio formats:\r\n\r\n    - mp3\r\n    - (more are coming soon, can be added easily using `mutagen`)\r\n\r\n\r\nTechnologies used or planned (for aspiring contributors)\r\n--------------------------------------------------------\r\n- django/python: database not used yet, but will be used to replace folder traversal\r\n- a versioned and defined and stable ReST server as well to allow add-on's and alternate front-ends in the future, while not in code now it is thought about as features are added\r\n- _, Backbone, jQ.tpl all powerhousing the new responsive Bootstrap Framework based set of theme(s) \r\n- multiple views per artist, album, playlist, etc all graceful as one would expect \r\n- mutagen: used to get music file meta data, supports many audio formats\r\n- webplayer by Yahoo!: the current media player, but it would be great to change this\r\n  to a pure html5 implementation without Flash\r\n- openid + whitelisting + invites: only invited ppl can login, via openid\r\n\r\n\r\nPlanned features (most important at the top)\r\n--------------------------------------------\r\n- openid + whitelisting + invites: only invited ppl can login, via openid\r\n- Change the navigation: instead of page reloads folder by folder, load the entire\r\n  collection on the client side into backbone objects and use js to navigate artists and albums.\r\n- Search!\r\n- Recently listened to\r\n- Count how many times I listen to the same stuff\r\n- Favoriting: albums, artists, songs\r\n- Playlists!\r\n- Add support for more audio formats: ogg, flac\r\n  Note: the webplayer probably cannot play anything but mp3.\r\n  A pure HTML5 player should have no problem with that.\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"A simple web interface to listen to your music anywhere."}